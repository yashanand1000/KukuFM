<nav class="navbar sticky-top navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">KukuFM</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup"
            aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link" href="/">Home</a>
                <a class="nav-link" href="/audiobooks">Audiobooks</a>
                <a class="nav-link" href="/audiobooks/new">New Audiobook</a>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarFilterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                      Categories
                    </a>
                    <div class="dropdown-menu bg-dark" aria-labelledby="navbarFilterDropdown">
                        <a class="dropdown-item text-white" href="#" data-genre="">All</a>
                        <a class="dropdown-item text-white" href="#" data-genre="Fiction">Fiction</a>
                        <a class="dropdown-item text-white" href="#" data-genre="Non-fiction">Non-fiction</a>
                        <a class="dropdown-item text-white" href="#" data-genre="Adventurous">Adventurous</a>
                    </div>
                </li>
            </div>

            <div class="navbar-nav ml-auto mr-auto">
                <div class="nav-item search-item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-search" viewBox="0 0 16 16">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                    </svg>
                    <input type="text" class="search-input" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-light search-button" type="button"></button>
                </div>    
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarFilterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="white" class="bi bi-person" viewBox="0 0 16 16">
                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"/>
                        </svg>
                    </a>
                    <div class="dropdown-menu bg-dark" aria-labelledby="navbarFilterDropdown">
                        <button class="dropdown-item text-white" onclick="buySubscription()">Buy Subscription</button>
                        <% if(!currentUser) {%>
                            <a class="dropdown-item text-white" href="/login" data-genre="">Login</a>
                            <a class="dropdown-item text-white" href="/register" data-genre="Register">Register</a>
                        <% } else {%>
                            <a class="dropdown-item text-white" href="/logout" data-genre="Logout">Logout</a>
                        <% } %>
                    </div>
                </li>     
            </div>
        </div>
    </div>
</nav>

<style>
    .search-item {
        display: flex;
        align-items: center;
    }

    .search-input {
        display: none;
        border: none;
        outline: none;
        background: transparent;
        color: white;
        transition: width 0.5s ease-in-out;
        width: 0;
    }

    .search-button {
        border: none;
        background: transparent;
        color: white;
    }

    .search-button:focus ~ .search-input,
    .search-input:focus,
    .search-input:valid {
        display: block;
        width: 200px;
        border-bottom: 1px solid white;
        padding: 2px 5px;
        margin-left: 5px;
    }

    .dropdown-menu .dropdown-item:hover {
        background-color: #232F3E; /* Change this color as needed */
        color: #ffffff;
    }
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    async function buySubscription() {
        const isLoggedIn = <%= currentUser ? 'true' : 'false' %>;

        if (!isLoggedIn) {
            window.location.href = '/login';
            req.flashResponse()
            return;
        }
        const amountInRupees = 1; // Set the amount in rupees
        const amountInPaise = amountInRupees * 100; // Convert to the smallest currency unit (paise)
        
        try {
            const response = await fetch('/payment/createOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    amount: amountInPaise, // amount in the smallest currency unit
                    currency: 'INR',
                    receipt: 'receipt_id_12345'
                })
            });

            if (!response.ok) {
                if (response.status === 401) { // User is not authenticated
                    window.location.href = '/login';
                    return;
                }
                throw new Error('Failed to create order');
            }

            const order = await response.json();

            const options = {
                "key": "<%= process.env.RAZORPAY_KEY_ID %>", // Razorpay key ID from environment variables
                "amount": order.amount,
                "currency": order.currency,
                "name": "KukuFM",
                "description": "Subscription Payment",
                "order_id": order.id,
                "handler": async function (response) {
                    const verificationResponse = await fetch('/payment/verifyPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(response)
                    });

                    if (verificationResponse.ok) {
                        const flashResponse = await fetch('/payment/flashMessage', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ message: 'Payment successful!' })
                        });

                        if (!flashResponse.ok) {
                            throw new Error('Failed to send flash message');
                        }
                    } else {
                        throw new Error('Payment verification failed');
                    }
                },
                "prefill": {
                    "name": "Yash Anand",
                    "email": "yashanand1000@gmail.com"
                },
                "theme": {
                    "color": "#3399cc"
                }
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } catch (error) {
            console.error('Error during buySubscription:', error);
            const flashResponse = await fetch('/payment/flashMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Oops, something went wrong while creating the order.' })
            });

            if (!flashResponse.ok) {
                console.error('Failed to send flash message:', error);
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Event listener for genre filter
        document.querySelectorAll('.dropdown-item[data-genre]').forEach(function(item) {
            item.addEventListener('click', function() {
                var genre = this.getAttribute('data-genre');
                window.location.href = '/audiobooks?genre=' + genre;
            });
        });

        // Event listener for search functionality
        document.querySelector('.search-input').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                performSearch();
            }
        });

        function performSearch() {
            const searchPhrase = document.querySelector('.search-input').value.trim();
            if (searchPhrase.length > 0) {
                window.location.href = `/audiobooks?title=${encodeURIComponent(searchPhrase)}`;
            }
        }
    });
</script>
